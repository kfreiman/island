Абстрактная задача по архитектуре проекта
_______________________________________________________________________________________________

Суть проекта в очень простой и высоконагруженной соц.сети, более 60000(0) запросов в секунду в условиях ограниченной мощности сервера/серверов
_______________________________________________________________________________________________

Среда: постгрес <9.6, redis, Node.js, API на php7 (сервер php-fpm, lumen, nginx, не имеет значения, можно применять дополнительных демонов или технологии, если может помочь решению задачи)

Пользователи хранятся в таблице users базы данных постгреса. Сессии пользователей хранятся в redis.

Изначально:

[API] = php7 REST + дополнительные выдачи по запросу фронта (lumen/phalcon не имеет значения)

[Фронт] = Приложение написано на одном из js фреймворков и логика почти полностью вынесена на фронтенд (Vuejs2, Angular2, Polymer, не имеет значения) js изначально включает шаблоны всех страниц.

[Node.js] = На сервере крутится "реакт" сервер на Node.js для организации вебсокетов между фроном и бекендом. Есть доступ к redis (Желательно не иметь доступа к постгресу)

Все данные для сайта [Фронт] берет из [API]: т.е. выдачу людей по критериям, профили пользователей, подарки и все остальное (не имеет значения)

На [Фронте] при авторизации пользователя, помимо запрашивания данных с [API] устанавливается связь с сервером на [Node.js] с помощью вебсокитов, лонгпула для реактивного обновления данных на фронте, в случае написания сообщений, уведомлений и остальных действий со стороны других пользователей.

_______________________________________________________________________________________________

Задача заключается в следующем:

Выбрать, найти "бест практикс" и разработать наиболее оптимальное решение по организации уведомлений между пользователями. Для простоты предположим, что типов уведомлений всего три: меня посетил другой человек [Посещение], человек оценил мои фото [Лайк], системное сообщение.

[Посещение] должно содержать количество раз, сколько пользователь зашел на страницу пользователя.

[Лайк] должен группироваться по фотографиям на фронте

Должна быть пагинация по последним посещениям всех типов и фильтрование по типам.

______________________________________________________________________________________________

Решение предполагает хранение уведомлений в redis посредством [Node.js] и вебсокетов без взаимодействия с постгресом

P.S. Основная сложность в обновлении данных, группировки, пагинации, скорости, способу хранения данных
______________________________________________________________________________________________
Например такой простейший лог действий работающего приложения:
User1 connected by websockets to Node.js
User2 connected by websockets to Node.js
User3 connected by websockets to Node.js

User2 visit User1: times 1 date: 14-12-1992 12:23:33
User3 visit User1: times 1 date: 14-12-1992 12:24:33
System emit notification 'Технические работы с 13:00 до 13:02. Просим прощения за неудобства' date: 14-12-1992 12:25:00
User3 visit User1: times 2 date: 14-12-1992 12:25:16
User3 visit User1: times 3 date: 14-12-1992 12:26:06
User2 like:photo User1: [goodimage.jpg] date: 14-12-1992 12:26:26
User2 like:photo User1: [goodimage2.jpg] date: 14-12-1992 12:27:16
User2 unlike:photo User1: [goodimage2.jpg] date: 14-12-1992 12:27:18
User2 like:photo User1: [goodimage3.jpg] date: 14-12-1992 12:28:44
User3 like:photo User1: [goodimage.jpg] date: 14-12-1992 12:28:56
User3 like:photo User1: [goodimage4.jpg] date: 14-12-1992 12:29:36
User3 unlike:photo User1: [goodimage7.jpg] date: 14-12-1992 12:32:06
User3 visit User1: times 4 date: 14-12-1992 16:26:06
....
User2 visit User1: times 1 date: 15-12-1992 12:13:33
User2 unlike:photo User1: [goodimage3.jpg] date: 15-12-1992 12:28:44
User2 like:photo User1: [goodimage6.jpg] date: 15-12-1992 12:28:54
User2 unlike:photo User1: [goodimage.jpg] date: 15-12-1992 12:29:44
User2 unlike:photo User1: [goodimage3.jpg] date: 15-12-1992 12:38:44
User2 visit User1: times 2 date: 15-12-1992 12:43:33

Должен выводить для User1 список:

15 декабря 1992:
Пользователь User2 посетил вас 2 раз 15-12-1992 12:43:33
Пользователь User2 оценил ваши изображения [goodimage6.jpg] в 15-12-1992 12:28:54
....

14 декабря 1992:
Пользователь User3 посетил вас 3 раз в 14-12-1992 16:26:06
Пользователь User3 оценил ваши изображения [goodimage4.jpg, goodimage.jpg] в 14-12-1992 12:29:36
Пользователь User2 оценил ваши изображения [goodimage.jpg, goodimage3.jpg] в 14-12-1992 12:29:36
Технические работы с 13:00 до 13:02. Просим прощения за неудобства (14-12-1992 12:25:00)
Пользователь User2 посетил вас 1 раз в 14-12-1992 12:23:33

+ всегда есть возможность выбрать, к примеру 50 последних записей каждого из типа записей или их сочетания

Все должно быть в "реальном времени". Напишите часть решения или все решение кодом на js (Node.js), остальную часть (фронт, апи, возможность аутентификации, необходимые дополнительные технологии) можете описать текстом, но желательно тоже реализовать прототип/заглушки. Вы не в чем не ограничены, применение любых технологий из списка указанных выше или других желательно обосновать хотя бы одним предложением, к примеру: наиболее разумным в подобном приложении использовать не вебсокеты, а лонгпуллинг, поскольку вебсокеты нестабильны и провайдеры могут блокировать необходимые заголовки, необходима эмуляция вебсокетов для браузеров не поддерживающих эту технологию. Или: лучше использовать не лонгпуллинг в приложении, а вебсокеты, поскольку последние дают максимальную скорость и приближенность к реалтайму, поддерживаются большинством современных браузеров, поддержка и надежность передачи приближена к 100% при использовании защищеных соединений.

По возможности протестировать результат на 20000 запросов в секунду, предложиить несколько архитектурных вариантов реализации этого функционала (опционально)



По всем вопросам по заданию обращайтесь на ivan@os-design.ru или скайп nightdiraven








